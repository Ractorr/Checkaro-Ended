"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const eventPromised_1 = require("../utils/eventPromised");
const steps_1 = require("../steps");
const defaultOptions = {
    path: process.cwd(),
    typescript: false,
    packages: [],
    theme: "@frontity/mars-theme",
};
/**
 * The create command, exported to be used programatically.
 *
 * @param options - The options of the create command. Defined by {@link
 * CreateCommandOptions}.
 *
 * @returns An instance of {@link EventPromised}, which is a promise that can
 * also send events using an EventEmitter.
 */
exports.default = (options) => 
// EventPromised is a combination of EventEmitter and Promise.
new eventPromised_1.EventPromised((resolve, reject, emit) => {
    // Run an async action to be able to use `await`.
    (async () => {
        let step;
        let dirExisted;
        // 1. Parses and validates options.
        const { name, theme, path, typescript, } = steps_1.normalizeOptions(defaultOptions, options);
        process.on("SIGINT", async () => {
            if (typeof dirExisted !== "undefined")
                await steps_1.revertProgress(dirExisted, path);
        });
        try {
            // 2. Ensures that the project dir exists and is empty.
            step = steps_1.ensureProjectDir(path);
            emit("message", `Ensuring ${chalk_1.default.yellow(path)} directory.`, step);
            dirExisted = await step;
            // 3. Creates `README.md`
            step = steps_1.createReadme(name, path);
            emit("message", `Creating ${chalk_1.default.yellow("README.md")}.`, step);
            await step;
            // 3. Creates `package.json`.
            step = steps_1.createPackageJson(name, theme, path);
            emit("message", `Creating ${chalk_1.default.yellow("package.json")}.`, step);
            await step;
            // 4. Creates `frontity.settings`.
            const extension = typescript ? "ts" : "js";
            step = steps_1.createFrontitySettings(extension, name, path, theme);
            emit("message", `Creating ${chalk_1.default.yellow(`frontity.settings.${extension}`)}.`, step);
            await step;
            // 5. Clones the theme inside `packages`.
            step = steps_1.cloneStarterTheme(theme, path);
            emit("message", `Cloning ${chalk_1.default.green(theme)}.`, step);
            await step;
            // 6. Installs dependencies.
            step = steps_1.installDependencies(path);
            emit("message", `Installing dependencies.`, step);
            await step;
            // 7. Download favicon.
            step = steps_1.downloadFavicon(path);
            emit("message", `Downloading ${chalk_1.default.yellow("favicon.ico")}.`, step);
            await step;
        }
        catch (error) {
            if (typeof dirExisted !== "undefined")
                await steps_1.revertProgress(dirExisted, path);
            reject(error);
        }
    })().then(resolve);
});
